// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: leaderboard.sql

package db

import (
	"context"
)

const deleteScoresAfterTen = `-- name: DeleteScoresAfterTen :exec
DELETE FROM leaderboard
WHERE id NOT IN (
    SELECT id FROM leaderboard
    ORDER BY score DESC, timer ASC, created_at ASC
    LIMIT 10
)
`

func (q *Queries) DeleteScoresAfterTen(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteScoresAfterTen)
	return err
}

const insertNewScore = `-- name: InsertNewScore :exec
INSERT INTO leaderboard (user_name, score, timer)
VALUES ($1, $2, $3)
`

type InsertNewScoreParams struct {
	UserName string
	Score    int32
	Timer    int32
}

func (q *Queries) InsertNewScore(ctx context.Context, arg InsertNewScoreParams) error {
	_, err := q.db.ExecContext(ctx, insertNewScore, arg.UserName, arg.Score, arg.Timer)
	return err
}

const organizeTopTenList = `-- name: OrganizeTopTenList :many
SELECT id, user_name, score, timer, created_at
FROM leaderboard
ORDER BY score DESC, timer ASC, created_at ASC
LIMIT 10
`

func (q *Queries) OrganizeTopTenList(ctx context.Context) ([]Leaderboard, error) {
	rows, err := q.db.QueryContext(ctx, organizeTopTenList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leaderboard
	for rows.Next() {
		var i Leaderboard
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Score,
			&i.Timer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
